{"version":3,"sources":["GlobalContext.js","Components/MenuBar.js","Components/NavBar.js","Pages/Main.js","Pages/Research.js","Pages/Projects.js","App.js","serviceWorker.js","index.js"],"names":["GlobalContext","createContext","GlobalContextProvider","props","useState","isEng","setEng","Provider","value","children","BackDrop","conditionalName","isOpen","className","onClick","setOpen","SideBar","useContext","exact","to","Dict","enDict","zhDict","NavBar","Main","Profile","Research","Item","ProjectJson","Projects","map","proj","key","Name","src","Img","alt","Abstract","App","path","strict","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71e57b5b.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\n\nexport const GlobalContext = createContext();\n\nfunction GlobalContextProvider (props) {\n    const [isEng, setEng] = useState(true);\n\n\n    return (\n        <GlobalContext.Provider value={{isEng, setEng}}>\n            { props.children }\n        </GlobalContext.Provider>\n    );\n}\n\nexport default GlobalContextProvider;","import React, { useState, useContext } from 'react'\nimport { NavLink } from 'react-router-dom';\nimport { GlobalContext } from '../GlobalContext';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuOpenIcon from '@material-ui/icons/MenuOpen';\nimport \"./NavBar.css\"\n\nfunction BackDrop(props) {\n    let conditionalName= props.isOpen ? \"BackDrop open\" : \"BackDrop\"\n    return (\n        <div className={conditionalName} onClick={()=>{\n            if (props.isOpen) props.setOpen(!props.isOpen)\n        }}/>\n    );\n}\n\nexport function SideBar(props) {\n    const [isOpen, setOpen] = useState(false)\n    const {isEng, setEng} = useContext(GlobalContext);\n\n    let conditionalName = isOpen ? \"SideBar open\" : \"SideBar\";\n\n    return(\n        <div>\n            <button className=\"MenuBtn\" onClick={()=>setOpen(!isOpen)}>\n                { isOpen ? <MenuOpenIcon /> : <MenuIcon /> }\n            </button>\n            <BackDrop isOpen={isOpen} setOpen={setOpen}/>\n            <nav className={conditionalName}>\n                <ul>\n                    <li><NavLink exact to=\"/\">{props.Dict[0]}</NavLink></li>\n                    <li><NavLink exact to=\"/research\">{props.Dict[1]}</NavLink></li>\n                    <li><NavLink exact to=\"/projects\">{props.Dict[2]}</NavLink></li>\n                    <li><NavLink exact to=\"/resume\">{props.Dict[3]}</NavLink></li>\n                    <li><div className=\"SideLangBtn\" onClick={() => {setEng(!isEng)}}>{props.Dict[4]}</div></li>\n                </ul>\n            </nav>\n        </div>\n    )\n}","import React, { useContext } from 'react'\nimport './NavBar.css'\nimport { GlobalContext } from \"../GlobalContext\"\nimport {SideBar} from \"./MenuBar\"\nimport { NavLink } from 'react-router-dom';\n\nconst enDict = [\"Home\", \"Research\", \"Projects\", \"Resume\", \"Language\"];\nconst zhDict = [\"主页\", \"研究\", \"项目\", \"简历\", \"语言\"];\n\nexport default function NavBar(props) {\n    const {isEng, setEng} = useContext(GlobalContext);\n\n    let Dict = isEng ? enDict : zhDict;\n\n    return (\n        <header className=\"NavBarHeader\">\n            <SideBar  Dict={Dict}/>\n            <nav className = \"NavBarWrapper\">\n                <div className=\"Spacer\" />\n                <div className=\"NavItem\">\n                    <ul>\n                        <li><NavLink exact to=\"/\">{Dict[0]}</NavLink></li>\n                        <li><NavLink exact to=\"/research\">{Dict[1]}</NavLink></li>\n                        <li><NavLink exact to=\"/projects\">{Dict[2]}</NavLink></li>\n                        <li><NavLink exact to=\"/resume\">{Dict[3]}</NavLink></li>\n                        <li><div className=\"TopLangBtn\" onClick={()=>{setEng(!isEng)}}>{Dict[4]}</div></li>\n                    </ul>\n                </div>\n            </nav>\n        </header>\n    );\n}\n","import React from 'react'\nimport './Main.css'\n\nexport default function Main (props) {\n    return (<Profile />);\n}\n\nfunction Profile(props) {\n    return (\n        <div className=\"ProfileWrapper\">\n            <h1>Vince Ai</h1>\n            <h3>{\"Computer Science and Applied Mathematics,\\n Samueli School of Engineering, UCLA\"}</h3>\n            <h5>4245359709</h5>\n            <div className=\"contact\">\n                \n            </div>\n        </div>\n    )\n}","import React from 'react'\n\nexport default function Research (props) {\n    return (\n        <div>\n            <div className=\"H1\">Research</div>\n            <Item />\n        </div>\n        \n    );\n}\n\n/*\n    Item: A single research item\n    Props: Name, Abstract, Photo, \n           Links: [Github, Paper, Poster]\n*/\nfunction Item (props){\n    return (\n        <div className=\"ItemWrapper\">\n\n        </div>\n    );\n}","import React from 'react'\nimport './Projects.css'\n\nlet ProjectJson = [\n    {\n        \"Name\":  \"Something2\"\n        ,\"Img\": \"imgs/logo_cpp.jpg\"\n        ,\"Abstract\": \"Today, I'm going to show you how to use just TWO CSS grid properties to create a fully responsive image gallery\"\n        ,\"Github\": \"someurl\"\n    },\n    {\n        \"Name\":  \"Something3\"\n        ,\"Img\": \"imgs/logo_cpp.jpg\"\n        ,\"Abstract\": \"Today, I'm going to show you how to use just TWO CSS grid properties to create a fully responsive image gallery\"\n        ,\"Github\": \"someurl\"\n    },\n    {\n        \"Name\":  \"Something4\"\n        ,\"Img\": \"imgs/logo_cpp.jpg\"\n        ,\"Abstract\": \"Today, I'm going to show you how to use just TWO CSS grid properties to create a fully responsive image gallery\"\n        ,\"Github\": \"someurl\"\n    },\n    {\n        \"Name\":  \"Something5\"\n        ,\"Img\": \"imgs/logo_cpp.jpg\"\n        ,\"Abstract\": \"Today, I'm going to show you how to use just TWO CSS grid properties to create a fully responsive image gallery\"\n        ,\"Github\": \"someurl\"\n    },\n    {\n        \"Name\":  \"Something6\"\n        ,\"Img\": \"imgs/logo_cpp.jpg\"\n        ,\"Abstract\": \"Today, I'm going to show you how to use just TWO CSS grid properties to create a fully responsive image gallery\"\n        ,\"Github\": \"someurl\"\n    },\n    {\n        \"Name\":  \"Something1\"\n        ,\"Img\": \"imgs/logo_cpp.jpg\"\n        ,\"Abstract\": \"Today, I'm going to show you how to use just TWO CSS grid properties to create a fully responsive image gallery\"\n        ,\"Github\": \"someurl\"\n    },\n]\n\n\nexport default function Projects (props) {\n    return (\n        <div className=\"ProjectWrapper\">\n            <div className=\"H1\">Projects</div>\n            <main>\n                {ProjectJson.map(proj =>\n                    <Item props={proj} key={proj.Name}/>\n                )}\n            </main>\n        </div>\n    );\n}\n\n/*\n    Item: A single research item\n    Props: Name, Abstract, Img, \n           Links: [Github, Paper, Poster]\n*/\nfunction Item (props) {\n    return(\n        <div className=\"ItemWrapper\">\n            <img src={props.props.Img} alt=\"\"/>\n            <div className=\"Info\">\n                <strong className=\"Name\">{props.props.Name}</strong>\n                <p className=\"Abstract\">{props.props.Abstract}</p>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Route from 'react-router-dom/Route';\nimport GlobalContextProvider from './GlobalContext';\nimport NavBar from './Components/NavBar';\nimport Main from './Pages/Main';\nimport Research from './Pages/Research';\nimport Projects from './Pages/Projects';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <GlobalContextProvider>\n          <NavBar />\n          <Route path=\"/\" exact strict component={Main} />\n          <Route path=\"/research\" exact strict component={Research} />\n          <Route path=\"/projects\" exact strict component={Projects} />\n          <Route path=\"/resume\" exact strict/>\n          \n        </GlobalContextProvider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}